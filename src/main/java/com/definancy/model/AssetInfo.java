/*
 * Definancy API
 * Specification version: 0.0.1.wip.20250924
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.AssetMediaMap;
import com.definancy.model.AssetStatus;
import com.definancy.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * Digital asset metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-24T14:56:52.498104927Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class AssetInfo {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  @javax.annotation.Nonnull
  private AssetMediaMap media;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  @javax.annotation.Nonnull
  private URI website;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private AssetStatus status;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  @javax.annotation.Nonnull
  private List<String> networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private Version version;

  public AssetInfo() {
  }

  public AssetInfo name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Human-readable resource identifier that follows standard naming conventions for display purposes. Used for network names, asset names, and other user-facing identifiers that need to be presentable in user interfaces and documentation.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public AssetInfo media(@javax.annotation.Nonnull AssetMediaMap media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nonnull
  public AssetMediaMap getMedia() {
    return media;
  }

  public void setMedia(@javax.annotation.Nonnull AssetMediaMap media) {
    this.media = media;
  }


  public AssetInfo website(@javax.annotation.Nonnull URI website) {
    this.website = website;
    return this;
  }

  /**
   * Valid HTTP or HTTPS URL pointing to external resources such as asset websites, network documentation, or media assets. Must include the protocol scheme and be properly formatted for web access.
   * @return website
   */
  @javax.annotation.Nonnull
  public URI getWebsite() {
    return website;
  }

  public void setWebsite(@javax.annotation.Nonnull URI website) {
    this.website = website;
  }


  public AssetInfo status(@javax.annotation.Nonnull AssetStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public AssetStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull AssetStatus status) {
    this.status = status;
  }


  public AssetInfo networks(@javax.annotation.Nonnull List<String> networks) {
    this.networks = networks;
    return this;
  }

  public AssetInfo addNetworksItem(String networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * Supported networks for this asset.
   * @return networks
   */
  @javax.annotation.Nonnull
  public List<String> getNetworks() {
    return networks;
  }

  public void setNetworks(@javax.annotation.Nonnull List<String> networks) {
    this.networks = networks;
  }


  public AssetInfo version(@javax.annotation.Nonnull Version version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public Version getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull Version version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetInfo assetInfo = (AssetInfo) o;
    return Objects.equals(this.name, assetInfo.name) &&
        Objects.equals(this.media, assetInfo.media) &&
        Objects.equals(this.website, assetInfo.website) &&
        Objects.equals(this.status, assetInfo.status) &&
        Objects.equals(this.networks, assetInfo.networks) &&
        Objects.equals(this.version, assetInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, media, website, status, networks, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("name", "media", "website", "status", "networks", "version"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("name", "media", "website", "status", "networks", "version"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in AssetInfo is not found in the empty JSON string", AssetInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `AssetInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `media`
      AssetMediaMap.validateJsonElement(jsonObj.get("media"));
      if (!jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      // validate the required field `status`
      AssetStatus.validateJsonElement(jsonObj.get("status"));
      // ensure the required json array is present
      if (jsonObj.get("networks") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("networks").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
      }
      // validate the required field `version`
      Version.validateJsonElement(jsonObj.get("version"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetInfo>() {
           @Override
           public void write(JsonWriter out, AssetInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetInfo
   * @throws IOException if the JSON string is invalid with respect to AssetInfo
   */
  public static AssetInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetInfo.class);
  }

  /**
   * Convert an instance of AssetInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

