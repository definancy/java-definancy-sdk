/*
 * Definancy Node API
 * Specification version: 0.0.1.wip.20250826
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.BlockchainConfirmationStats;
import com.definancy.model.BlockchainTransactionStatus;
import com.definancy.model.ContractAmount;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * Complete blockchain transaction record including addresses, amounts, timestamps, and confirmation status for comprehensive payment tracking and verification throughout the transaction lifecycle.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-24T14:07:22.312732801Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class BlockchainTransaction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  @javax.annotation.Nonnull
  private Integer ts;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nonnull
  private String sender;

  public static final String SERIALIZED_NAME_RECEIVER = "receiver";
  @SerializedName(SERIALIZED_NAME_RECEIVER)
  @javax.annotation.Nonnull
  private String receiver;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nonnull
  private ContractAmount amount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private BlockchainTransactionStatus status;

  public static final String SERIALIZED_NAME_CONFIRMATION_STATS = "confirmation-stats";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_STATS)
  @javax.annotation.Nonnull
  private BlockchainConfirmationStats confirmationStats;

  public BlockchainTransaction() {
  }

  public BlockchainTransaction id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique blockchain transaction hash or identifier as recorded on the  blockchain network. Used to track and verify transactions on the network.  This hash serves as the definitive reference for locating transactions  in blockchain explorers and verification systems.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public BlockchainTransaction ts(@javax.annotation.Nonnull Integer ts) {
    this.ts = ts;
    return this;
  }

  /**
   * UNIX timestamp in milliseconds representing a specific point in time. Used for tracking creation dates, expiration times, transaction timestamps, and other time-sensitive operations throughout the payment lifecycle.
   * minimum: 0
   * @return ts
   */
  @javax.annotation.Nonnull
  public Integer getTs() {
    return ts;
  }

  public void setTs(@javax.annotation.Nonnull Integer ts) {
    this.ts = ts;
  }


  public BlockchainTransaction sender(@javax.annotation.Nonnull String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Blockchain-specific address format used for cryptocurrency transactions. The exact format varies by network (e.g., Ethereum uses hexadecimal addresses starting with 0x, Bitcoin uses base58 encoding). Used for contract addresses, wallet addresses, and payment destinations.
   * @return sender
   */
  @javax.annotation.Nonnull
  public String getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nonnull String sender) {
    this.sender = sender;
  }


  public BlockchainTransaction receiver(@javax.annotation.Nonnull String receiver) {
    this.receiver = receiver;
    return this;
  }

  /**
   * Blockchain-specific address format used for cryptocurrency transactions. The exact format varies by network (e.g., Ethereum uses hexadecimal addresses starting with 0x, Bitcoin uses base58 encoding). Used for contract addresses, wallet addresses, and payment destinations.
   * @return receiver
   */
  @javax.annotation.Nonnull
  public String getReceiver() {
    return receiver;
  }

  public void setReceiver(@javax.annotation.Nonnull String receiver) {
    this.receiver = receiver;
  }


  public BlockchainTransaction amount(@javax.annotation.Nonnull ContractAmount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nonnull
  public ContractAmount getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nonnull ContractAmount amount) {
    this.amount = amount;
  }


  public BlockchainTransaction status(@javax.annotation.Nonnull BlockchainTransactionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public BlockchainTransactionStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull BlockchainTransactionStatus status) {
    this.status = status;
  }


  public BlockchainTransaction confirmationStats(@javax.annotation.Nonnull BlockchainConfirmationStats confirmationStats) {
    this.confirmationStats = confirmationStats;
    return this;
  }

  /**
   * Get confirmationStats
   * @return confirmationStats
   */
  @javax.annotation.Nonnull
  public BlockchainConfirmationStats getConfirmationStats() {
    return confirmationStats;
  }

  public void setConfirmationStats(@javax.annotation.Nonnull BlockchainConfirmationStats confirmationStats) {
    this.confirmationStats = confirmationStats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockchainTransaction blockchainTransaction = (BlockchainTransaction) o;
    return Objects.equals(this.id, blockchainTransaction.id) &&
        Objects.equals(this.ts, blockchainTransaction.ts) &&
        Objects.equals(this.sender, blockchainTransaction.sender) &&
        Objects.equals(this.receiver, blockchainTransaction.receiver) &&
        Objects.equals(this.amount, blockchainTransaction.amount) &&
        Objects.equals(this.status, blockchainTransaction.status) &&
        Objects.equals(this.confirmationStats, blockchainTransaction.confirmationStats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ts, sender, receiver, amount, status, confirmationStats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockchainTransaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    confirmationStats: ").append(toIndentedString(confirmationStats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "ts", "sender", "receiver", "amount", "status", "confirmation-stats"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("id", "ts", "sender", "receiver", "amount", "status", "confirmation-stats"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlockchainTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockchainTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in BlockchainTransaction is not found in the empty JSON string", BlockchainTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockchainTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `BlockchainTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlockchainTransaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if (!jsonObj.get("receiver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `receiver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver").toString()));
      }
      // validate the required field `amount`
      ContractAmount.validateJsonElement(jsonObj.get("amount"));
      // validate the required field `status`
      BlockchainTransactionStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `confirmation-stats`
      BlockchainConfirmationStats.validateJsonElement(jsonObj.get("confirmation-stats"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockchainTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockchainTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockchainTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockchainTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockchainTransaction>() {
           @Override
           public void write(JsonWriter out, BlockchainTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockchainTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlockchainTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlockchainTransaction
   * @throws IOException if the JSON string is invalid with respect to BlockchainTransaction
   */
  public static BlockchainTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockchainTransaction.class);
  }

  /**
   * Convert an instance of BlockchainTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

