/*
 * Definancy API
 * Specification version: 0.0.1.wip.20250924
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.AcceptancePaymentTrait;
import com.definancy.model.AcceptancePriceTrait;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * ContractTraits
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-24T14:56:52.498104927Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ContractTraits {
  public static final String SERIALIZED_NAME_ACCEPTANCE_PRICE_TRAIT = "AcceptancePriceTrait";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_PRICE_TRAIT)
  @javax.annotation.Nullable
  private AcceptancePriceTrait acceptancePriceTrait;

  public static final String SERIALIZED_NAME_ACCEPTANCE_PAYMENT_TRAIT = "AcceptancePaymentTrait";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_PAYMENT_TRAIT)
  @javax.annotation.Nullable
  private AcceptancePaymentTrait acceptancePaymentTrait;

  public ContractTraits() {
  }

  public ContractTraits acceptancePriceTrait(@javax.annotation.Nullable AcceptancePriceTrait acceptancePriceTrait) {
    this.acceptancePriceTrait = acceptancePriceTrait;
    return this;
  }

  /**
   * Get acceptancePriceTrait
   * @return acceptancePriceTrait
   */
  @javax.annotation.Nullable
  public AcceptancePriceTrait getAcceptancePriceTrait() {
    return acceptancePriceTrait;
  }

  public void setAcceptancePriceTrait(@javax.annotation.Nullable AcceptancePriceTrait acceptancePriceTrait) {
    this.acceptancePriceTrait = acceptancePriceTrait;
  }


  public ContractTraits acceptancePaymentTrait(@javax.annotation.Nullable AcceptancePaymentTrait acceptancePaymentTrait) {
    this.acceptancePaymentTrait = acceptancePaymentTrait;
    return this;
  }

  /**
   * Get acceptancePaymentTrait
   * @return acceptancePaymentTrait
   */
  @javax.annotation.Nullable
  public AcceptancePaymentTrait getAcceptancePaymentTrait() {
    return acceptancePaymentTrait;
  }

  public void setAcceptancePaymentTrait(@javax.annotation.Nullable AcceptancePaymentTrait acceptancePaymentTrait) {
    this.acceptancePaymentTrait = acceptancePaymentTrait;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractTraits contractTraits = (ContractTraits) o;
    return Objects.equals(this.acceptancePriceTrait, contractTraits.acceptancePriceTrait) &&
        Objects.equals(this.acceptancePaymentTrait, contractTraits.acceptancePaymentTrait);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptancePriceTrait, acceptancePaymentTrait);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractTraits {\n");
    sb.append("    acceptancePriceTrait: ").append(toIndentedString(acceptancePriceTrait)).append("\n");
    sb.append("    acceptancePaymentTrait: ").append(toIndentedString(acceptancePaymentTrait)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("AcceptancePriceTrait", "AcceptancePaymentTrait"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractTraits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractTraits.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in ContractTraits is not found in the empty JSON string", ContractTraits.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractTraits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `ContractTraits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AcceptancePriceTrait`
      if (jsonObj.get("AcceptancePriceTrait") != null && !jsonObj.get("AcceptancePriceTrait").isJsonNull()) {
        AcceptancePriceTrait.validateJsonElement(jsonObj.get("AcceptancePriceTrait"));
      }
      // validate the optional field `AcceptancePaymentTrait`
      if (jsonObj.get("AcceptancePaymentTrait") != null && !jsonObj.get("AcceptancePaymentTrait").isJsonNull()) {
        AcceptancePaymentTrait.validateJsonElement(jsonObj.get("AcceptancePaymentTrait"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractTraits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractTraits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractTraits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractTraits.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractTraits>() {
           @Override
           public void write(JsonWriter out, ContractTraits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractTraits read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractTraits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractTraits
   * @throws IOException if the JSON string is invalid with respect to ContractTraits
   */
  public static ContractTraits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractTraits.class);
  }

  /**
   * Convert an instance of ContractTraits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

