/*
 * Definancy Node API
 * Specification version: 0.0.1.wip.20250826
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.Amount;
import com.definancy.model.ContractMediaMap;
import com.definancy.model.ContractStatus;
import com.definancy.model.ContractTraits;
import com.definancy.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * Comprehensive metadata about a contract including deployment details, subscribed vaults, operational status, and version tracking. Provides all information needed to understand contract capabilities and current usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-24T14:07:22.312732801Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ContractInfo {
  public static final String SERIALIZED_NAME_VAULTS = "vaults";
  @SerializedName(SERIALIZED_NAME_VAULTS)
  @javax.annotation.Nonnull
  private List<String> vaults = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private String address;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  @javax.annotation.Nonnull
  private ContractMediaMap media;

  public static final String SERIALIZED_NAME_MINOR_UNIT = "minor-unit";
  @SerializedName(SERIALIZED_NAME_MINOR_UNIT)
  @javax.annotation.Nonnull
  private Amount minorUnit;

  public static final String SERIALIZED_NAME_TRAITS = "traits";
  @SerializedName(SERIALIZED_NAME_TRAITS)
  @javax.annotation.Nonnull
  private ContractTraits traits;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  @javax.annotation.Nullable
  private String note;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private ContractStatus status;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private Version version;

  public ContractInfo() {
  }

  public ContractInfo vaults(@javax.annotation.Nonnull List<String> vaults) {
    this.vaults = vaults;
    return this;
  }

  public ContractInfo addVaultsItem(String vaultsItem) {
    if (this.vaults == null) {
      this.vaults = new ArrayList<>();
    }
    this.vaults.add(vaultsItem);
    return this;
  }

  /**
   * List of vault identifiers that are currently subscribed to this contract and can process payments using it.
   * @return vaults
   */
  @javax.annotation.Nonnull
  public List<String> getVaults() {
    return vaults;
  }

  public void setVaults(@javax.annotation.Nonnull List<String> vaults) {
    this.vaults = vaults;
  }


  public ContractInfo address(@javax.annotation.Nonnull String address) {
    this.address = address;
    return this;
  }

  /**
   * Blockchain-specific address format used for cryptocurrency transactions. The exact format varies by network (e.g., Ethereum uses hexadecimal addresses starting with 0x, Bitcoin uses base58 encoding). Used for contract addresses, wallet addresses, and payment destinations.
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull String address) {
    this.address = address;
  }


  public ContractInfo media(@javax.annotation.Nonnull ContractMediaMap media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nonnull
  public ContractMediaMap getMedia() {
    return media;
  }

  public void setMedia(@javax.annotation.Nonnull ContractMediaMap media) {
    this.media = media;
  }


  public ContractInfo minorUnit(@javax.annotation.Nonnull Amount minorUnit) {
    this.minorUnit = minorUnit;
    return this;
  }

  /**
   * Get minorUnit
   * @return minorUnit
   */
  @javax.annotation.Nonnull
  public Amount getMinorUnit() {
    return minorUnit;
  }

  public void setMinorUnit(@javax.annotation.Nonnull Amount minorUnit) {
    this.minorUnit = minorUnit;
  }


  public ContractInfo traits(@javax.annotation.Nonnull ContractTraits traits) {
    this.traits = traits;
    return this;
  }

  /**
   * Get traits
   * @return traits
   */
  @javax.annotation.Nonnull
  public ContractTraits getTraits() {
    return traits;
  }

  public void setTraits(@javax.annotation.Nonnull ContractTraits traits) {
    this.traits = traits;
  }


  public ContractInfo note(@javax.annotation.Nullable String note) {
    this.note = note;
    return this;
  }

  /**
   * Optional free-form text field for additional context, remarks, or annotations. Provides flexibility for storing supplementary information that doesn&#39;t fit into structured fields.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(@javax.annotation.Nullable String note) {
    this.note = note;
  }


  public ContractInfo status(@javax.annotation.Nonnull ContractStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ContractStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull ContractStatus status) {
    this.status = status;
  }


  public ContractInfo version(@javax.annotation.Nonnull Version version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public Version getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull Version version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractInfo contractInfo = (ContractInfo) o;
    return Objects.equals(this.vaults, contractInfo.vaults) &&
        Objects.equals(this.address, contractInfo.address) &&
        Objects.equals(this.media, contractInfo.media) &&
        Objects.equals(this.minorUnit, contractInfo.minorUnit) &&
        Objects.equals(this.traits, contractInfo.traits) &&
        Objects.equals(this.note, contractInfo.note) &&
        Objects.equals(this.status, contractInfo.status) &&
        Objects.equals(this.version, contractInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vaults, address, media, minorUnit, traits, note, status, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractInfo {\n");
    sb.append("    vaults: ").append(toIndentedString(vaults)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    minorUnit: ").append(toIndentedString(minorUnit)).append("\n");
    sb.append("    traits: ").append(toIndentedString(traits)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("vaults", "address", "media", "minor-unit", "traits", "note", "status", "version"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("vaults", "address", "media", "minor-unit", "traits", "status", "version"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in ContractInfo is not found in the empty JSON string", ContractInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `ContractInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContractInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("vaults") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("vaults").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `vaults` to be an array in the JSON string but got `%s`", jsonObj.get("vaults").toString()));
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // validate the required field `media`
      ContractMediaMap.validateJsonElement(jsonObj.get("media"));
      // validate the required field `minor-unit`
      Amount.validateJsonElement(jsonObj.get("minor-unit"));
      // validate the required field `traits`
      ContractTraits.validateJsonElement(jsonObj.get("traits"));
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the required field `status`
      ContractStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `version`
      Version.validateJsonElement(jsonObj.get("version"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractInfo>() {
           @Override
           public void write(JsonWriter out, ContractInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractInfo
   * @throws IOException if the JSON string is invalid with respect to ContractInfo
   */
  public static ContractInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractInfo.class);
  }

  /**
   * Convert an instance of ContractInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

