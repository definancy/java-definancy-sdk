/*
 * Definancy API
 * Specification version: 0.0.1.wip.20250925
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.Compliance;
import com.definancy.model.PaymentEstimateScenario;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * Comprehensive payment estimation result providing calculated scenarios and compliance requirements for requested contract amounts. Generated in real-time to reflect current network conditions and fee structures.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public class PaymentEstimate {
  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  @javax.annotation.Nonnull
  private Integer ts;

  public static final String SERIALIZED_NAME_SCENARIOS = "scenarios";
  @SerializedName(SERIALIZED_NAME_SCENARIOS)
  @javax.annotation.Nonnull
  private List<PaymentEstimateScenario> scenarios = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  @javax.annotation.Nonnull
  private Compliance compliance;

  public PaymentEstimate() {
  }

  public PaymentEstimate ts(@javax.annotation.Nonnull Integer ts) {
    this.ts = ts;
    return this;
  }

  /**
   * UNIX timestamp in milliseconds representing a specific point in time. Used for tracking creation dates, expiration times, transaction timestamps, and other time-sensitive operations throughout the payment lifecycle.
   * minimum: 0
   * @return ts
   */
  @javax.annotation.Nonnull
  public Integer getTs() {
    return ts;
  }

  public void setTs(@javax.annotation.Nonnull Integer ts) {
    this.ts = ts;
  }


  public PaymentEstimate scenarios(@javax.annotation.Nonnull List<PaymentEstimateScenario> scenarios) {
    this.scenarios = scenarios;
    return this;
  }

  public PaymentEstimate addScenariosItem(PaymentEstimateScenario scenariosItem) {
    if (this.scenarios == null) {
      this.scenarios = new ArrayList<>();
    }
    this.scenarios.add(scenariosItem);
    return this;
  }

  /**
   * Generated payment scenarios.
   * @return scenarios
   */
  @javax.annotation.Nonnull
  public List<PaymentEstimateScenario> getScenarios() {
    return scenarios;
  }

  public void setScenarios(@javax.annotation.Nonnull List<PaymentEstimateScenario> scenarios) {
    this.scenarios = scenarios;
  }


  public PaymentEstimate compliance(@javax.annotation.Nonnull Compliance compliance) {
    this.compliance = compliance;
    return this;
  }

  /**
   * Get compliance
   * @return compliance
   */
  @javax.annotation.Nonnull
  public Compliance getCompliance() {
    return compliance;
  }

  public void setCompliance(@javax.annotation.Nonnull Compliance compliance) {
    this.compliance = compliance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentEstimate paymentEstimate = (PaymentEstimate) o;
    return Objects.equals(this.ts, paymentEstimate.ts) &&
        Objects.equals(this.scenarios, paymentEstimate.scenarios) &&
        Objects.equals(this.compliance, paymentEstimate.compliance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ts, scenarios, compliance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentEstimate {\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    scenarios: ").append(toIndentedString(scenarios)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ts", "scenarios", "compliance"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("ts", "scenarios", "compliance"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentEstimate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentEstimate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PaymentEstimate is not found in the empty JSON string", PaymentEstimate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentEstimate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `PaymentEstimate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentEstimate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("scenarios").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `scenarios` to be an array in the JSON string but got `%s`", jsonObj.get("scenarios").toString()));
      }

      JsonArray jsonArrayscenarios = jsonObj.getAsJsonArray("scenarios");
      // validate the required field `scenarios` (array)
      for (int i = 0; i < jsonArrayscenarios.size(); i++) {
        PaymentEstimateScenario.validateJsonElement(jsonArrayscenarios.get(i));
      };
      // validate the required field `compliance`
      Compliance.validateJsonElement(jsonObj.get("compliance"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentEstimate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentEstimate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentEstimate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentEstimate.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentEstimate>() {
           @Override
           public void write(JsonWriter out, PaymentEstimate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentEstimate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentEstimate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentEstimate
   * @throws IOException if the JSON string is invalid with respect to PaymentEstimate
   */
  public static PaymentEstimate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentEstimate.class);
  }

  /**
   * Convert an instance of PaymentEstimate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

