/*
 * Definancy API
 * Specification version: 0.0.1.wip.20250925
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.Compliance;
import com.definancy.model.PaymentAcceptanceScenario;
import com.definancy.model.PaymentAcceptanceStatus;
import com.definancy.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * Payment acceptance operational state and lifecycle information. Contains  current processing status, payment scenarios, compliance state, and  version tracking for audit and monitoring purposes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public class PaymentAcceptanceInfo {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private PaymentAcceptanceStatus status;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private Version version;

  public static final String SERIALIZED_NAME_SCENARIOS = "scenarios";
  @SerializedName(SERIALIZED_NAME_SCENARIOS)
  @javax.annotation.Nonnull
  private List<PaymentAcceptanceScenario> scenarios = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  @javax.annotation.Nonnull
  private Compliance compliance;

  public PaymentAcceptanceInfo() {
  }

  public PaymentAcceptanceInfo status(@javax.annotation.Nonnull PaymentAcceptanceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public PaymentAcceptanceStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull PaymentAcceptanceStatus status) {
    this.status = status;
  }


  public PaymentAcceptanceInfo version(@javax.annotation.Nonnull Version version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public Version getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull Version version) {
    this.version = version;
  }


  public PaymentAcceptanceInfo scenarios(@javax.annotation.Nonnull List<PaymentAcceptanceScenario> scenarios) {
    this.scenarios = scenarios;
    return this;
  }

  public PaymentAcceptanceInfo addScenariosItem(PaymentAcceptanceScenario scenariosItem) {
    if (this.scenarios == null) {
      this.scenarios = new ArrayList<>();
    }
    this.scenarios.add(scenariosItem);
    return this;
  }

  /**
   * Active payment execution scenarios with blockchain addresses,  amounts, and transaction tracking information.
   * @return scenarios
   */
  @javax.annotation.Nonnull
  public List<PaymentAcceptanceScenario> getScenarios() {
    return scenarios;
  }

  public void setScenarios(@javax.annotation.Nonnull List<PaymentAcceptanceScenario> scenarios) {
    this.scenarios = scenarios;
  }


  public PaymentAcceptanceInfo compliance(@javax.annotation.Nonnull Compliance compliance) {
    this.compliance = compliance;
    return this;
  }

  /**
   * Get compliance
   * @return compliance
   */
  @javax.annotation.Nonnull
  public Compliance getCompliance() {
    return compliance;
  }

  public void setCompliance(@javax.annotation.Nonnull Compliance compliance) {
    this.compliance = compliance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAcceptanceInfo paymentAcceptanceInfo = (PaymentAcceptanceInfo) o;
    return Objects.equals(this.status, paymentAcceptanceInfo.status) &&
        Objects.equals(this.version, paymentAcceptanceInfo.version) &&
        Objects.equals(this.scenarios, paymentAcceptanceInfo.scenarios) &&
        Objects.equals(this.compliance, paymentAcceptanceInfo.compliance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, version, scenarios, compliance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAcceptanceInfo {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    scenarios: ").append(toIndentedString(scenarios)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("status", "version", "scenarios", "compliance"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("status", "version", "scenarios", "compliance"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentAcceptanceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentAcceptanceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PaymentAcceptanceInfo is not found in the empty JSON string", PaymentAcceptanceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentAcceptanceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `PaymentAcceptanceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentAcceptanceInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `status`
      PaymentAcceptanceStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `version`
      Version.validateJsonElement(jsonObj.get("version"));
      // ensure the json data is an array
      if (!jsonObj.get("scenarios").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `scenarios` to be an array in the JSON string but got `%s`", jsonObj.get("scenarios").toString()));
      }

      JsonArray jsonArrayscenarios = jsonObj.getAsJsonArray("scenarios");
      // validate the required field `scenarios` (array)
      for (int i = 0; i < jsonArrayscenarios.size(); i++) {
        PaymentAcceptanceScenario.validateJsonElement(jsonArrayscenarios.get(i));
      };
      // validate the required field `compliance`
      Compliance.validateJsonElement(jsonObj.get("compliance"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAcceptanceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAcceptanceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAcceptanceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAcceptanceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAcceptanceInfo>() {
           @Override
           public void write(JsonWriter out, PaymentAcceptanceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAcceptanceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentAcceptanceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentAcceptanceInfo
   * @throws IOException if the JSON string is invalid with respect to PaymentAcceptanceInfo
   */
  public static PaymentAcceptanceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAcceptanceInfo.class);
  }

  /**
   * Convert an instance of PaymentAcceptanceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

