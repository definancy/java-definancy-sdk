/*
 * Definancy Node API
 * Specification version: 0.0.1.wip.20250826
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.ComplianceScenarioStatus;
import com.definancy.model.ContractId;
import com.definancy.model.DocumentType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * Compliance requirements and status for a specific contract within a  payment acceptance. Tracks required document types, submitted documents,  and overall compliance fulfillment status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-24T14:07:22.312732801Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ComplianceScenario {
  public static final String SERIALIZED_NAME_CONTRACT_ID = "contract-id";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  @javax.annotation.Nonnull
  private ContractId contractId;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  @javax.annotation.Nonnull
  private List<DocumentType> required = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBMITTED = "submitted";
  @SerializedName(SERIALIZED_NAME_SUBMITTED)
  @javax.annotation.Nullable
  private List<UUID> submitted = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private ComplianceScenarioStatus status;

  public ComplianceScenario() {
  }

  public ComplianceScenario contractId(@javax.annotation.Nonnull ContractId contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * Get contractId
   * @return contractId
   */
  @javax.annotation.Nonnull
  public ContractId getContractId() {
    return contractId;
  }

  public void setContractId(@javax.annotation.Nonnull ContractId contractId) {
    this.contractId = contractId;
  }


  public ComplianceScenario required(@javax.annotation.Nonnull List<DocumentType> required) {
    this.required = required;
    return this;
  }

  public ComplianceScenario addRequiredItem(DocumentType requiredItem) {
    if (this.required == null) {
      this.required = new ArrayList<>();
    }
    this.required.add(requiredItem);
    return this;
  }

  /**
   * List of document types that must be submitted and validated  for compliance with this contract&#39;s requirements.
   * @return required
   */
  @javax.annotation.Nonnull
  public List<DocumentType> getRequired() {
    return required;
  }

  public void setRequired(@javax.annotation.Nonnull List<DocumentType> required) {
    this.required = required;
  }


  public ComplianceScenario submitted(@javax.annotation.Nullable List<UUID> submitted) {
    this.submitted = submitted;
    return this;
  }

  public ComplianceScenario addSubmittedItem(UUID submittedItem) {
    if (this.submitted == null) {
      this.submitted = new ArrayList<>();
    }
    this.submitted.add(submittedItem);
    return this;
  }

  /**
   * List of document IDs that have been submitted for compliance  verification for this contract.
   * @return submitted
   */
  @javax.annotation.Nullable
  public List<UUID> getSubmitted() {
    return submitted;
  }

  public void setSubmitted(@javax.annotation.Nullable List<UUID> submitted) {
    this.submitted = submitted;
  }


  public ComplianceScenario status(@javax.annotation.Nonnull ComplianceScenarioStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ComplianceScenarioStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull ComplianceScenarioStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceScenario complianceScenario = (ComplianceScenario) o;
    return Objects.equals(this.contractId, complianceScenario.contractId) &&
        Objects.equals(this.required, complianceScenario.required) &&
        Objects.equals(this.submitted, complianceScenario.submitted) &&
        Objects.equals(this.status, complianceScenario.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractId, required, submitted, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceScenario {\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    submitted: ").append(toIndentedString(submitted)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("contract-id", "required", "submitted", "status"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("contract-id", "required", "status"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComplianceScenario
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplianceScenario.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in ComplianceScenario is not found in the empty JSON string", ComplianceScenario.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComplianceScenario.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `ComplianceScenario` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComplianceScenario.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `contract-id`
      ContractId.validateJsonElement(jsonObj.get("contract-id"));
      // ensure the required json array is present
      if (jsonObj.get("required") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("required").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `required` to be an array in the JSON string but got `%s`", jsonObj.get("required").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("submitted") != null && !jsonObj.get("submitted").isJsonNull() && !jsonObj.get("submitted").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `submitted` to be an array in the JSON string but got `%s`", jsonObj.get("submitted").toString()));
      }
      // validate the required field `status`
      ComplianceScenarioStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceScenario.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceScenario' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceScenario> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceScenario.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceScenario>() {
           @Override
           public void write(JsonWriter out, ComplianceScenario value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceScenario read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComplianceScenario given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComplianceScenario
   * @throws IOException if the JSON string is invalid with respect to ComplianceScenario
   */
  public static ComplianceScenario fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceScenario.class);
  }

  /**
   * Convert an instance of ComplianceScenario to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

