/*
 * Definancy API
 * Specification version: 0.0.1.wip.20250925
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.ContractAmountFormat;
import com.definancy.model.PaymentAcceptanceOrder;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * Payment acceptance configuration for API requests. Accepts amount data in flexible formats, allowing callers to provide either display values or raw precision data for payment scenarios.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public class PaymentAcceptanceConfigFormat {
  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  @javax.annotation.Nullable
  private PaymentAcceptanceOrder order;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  @javax.annotation.Nullable
  private List<UUID> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_SCENARIOS = "price-scenarios";
  @SerializedName(SERIALIZED_NAME_PRICE_SCENARIOS)
  @javax.annotation.Nullable
  private List<ContractAmountFormat> priceScenarios = new ArrayList<>();

  public PaymentAcceptanceConfigFormat() {
  }

  public PaymentAcceptanceConfigFormat order(@javax.annotation.Nullable PaymentAcceptanceOrder order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public PaymentAcceptanceOrder getOrder() {
    return order;
  }

  public void setOrder(@javax.annotation.Nullable PaymentAcceptanceOrder order) {
    this.order = order;
  }


  public PaymentAcceptanceConfigFormat documents(@javax.annotation.Nullable List<UUID> documents) {
    this.documents = documents;
    return this;
  }

  public PaymentAcceptanceConfigFormat addDocumentsItem(UUID documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Optional list of document IDs to associate with this payment  acceptance for compliance purposes.
   * @return documents
   */
  @javax.annotation.Nullable
  public List<UUID> getDocuments() {
    return documents;
  }

  public void setDocuments(@javax.annotation.Nullable List<UUID> documents) {
    this.documents = documents;
  }


  public PaymentAcceptanceConfigFormat priceScenarios(@javax.annotation.Nullable List<ContractAmountFormat> priceScenarios) {
    this.priceScenarios = priceScenarios;
    return this;
  }

  public PaymentAcceptanceConfigFormat addPriceScenariosItem(ContractAmountFormat priceScenariosItem) {
    if (this.priceScenarios == null) {
      this.priceScenarios = new ArrayList<>();
    }
    this.priceScenarios.add(priceScenariosItem);
    return this;
  }

  /**
   * Required payment obligations as contract-amount pairs. Must contain  at least one scenario when creating new payment acceptance.
   * @return priceScenarios
   */
  @javax.annotation.Nullable
  public List<ContractAmountFormat> getPriceScenarios() {
    return priceScenarios;
  }

  public void setPriceScenarios(@javax.annotation.Nullable List<ContractAmountFormat> priceScenarios) {
    this.priceScenarios = priceScenarios;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAcceptanceConfigFormat paymentAcceptanceConfigFormat = (PaymentAcceptanceConfigFormat) o;
    return Objects.equals(this.order, paymentAcceptanceConfigFormat.order) &&
        Objects.equals(this.documents, paymentAcceptanceConfigFormat.documents) &&
        Objects.equals(this.priceScenarios, paymentAcceptanceConfigFormat.priceScenarios);
  }

  @Override
  public int hashCode() {
    return Objects.hash(order, documents, priceScenarios);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAcceptanceConfigFormat {\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    priceScenarios: ").append(toIndentedString(priceScenarios)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("order", "documents", "price-scenarios"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentAcceptanceConfigFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentAcceptanceConfigFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PaymentAcceptanceConfigFormat is not found in the empty JSON string", PaymentAcceptanceConfigFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentAcceptanceConfigFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `PaymentAcceptanceConfigFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        PaymentAcceptanceOrder.validateJsonElement(jsonObj.get("order"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull() && !jsonObj.get("documents").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
      }
      if (jsonObj.get("price-scenarios") != null && !jsonObj.get("price-scenarios").isJsonNull()) {
        JsonArray jsonArraypriceScenarios = jsonObj.getAsJsonArray("price-scenarios");
        if (jsonArraypriceScenarios != null) {
          // ensure the json data is an array
          if (!jsonObj.get("price-scenarios").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `price-scenarios` to be an array in the JSON string but got `%s`", jsonObj.get("price-scenarios").toString()));
          }

          // validate the optional field `price-scenarios` (array)
          for (int i = 0; i < jsonArraypriceScenarios.size(); i++) {
            ContractAmountFormat.validateJsonElement(jsonArraypriceScenarios.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAcceptanceConfigFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAcceptanceConfigFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAcceptanceConfigFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAcceptanceConfigFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAcceptanceConfigFormat>() {
           @Override
           public void write(JsonWriter out, PaymentAcceptanceConfigFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAcceptanceConfigFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentAcceptanceConfigFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentAcceptanceConfigFormat
   * @throws IOException if the JSON string is invalid with respect to PaymentAcceptanceConfigFormat
   */
  public static PaymentAcceptanceConfigFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAcceptanceConfigFormat.class);
  }

  /**
   * Convert an instance of PaymentAcceptanceConfigFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

