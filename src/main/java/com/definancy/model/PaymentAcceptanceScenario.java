/*
 * Definancy API
 * Specification version: 0.0.1.wip.20250924
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.model;

import java.util.Objects;
import java.util.Locale;
import com.definancy.model.BlockchainTransaction;
import com.definancy.model.ContractAmount;
import com.definancy.model.Expire;
import com.definancy.model.PaymentAcceptanceScenarioStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.definancy.JSON;

/**
 * Individual payment execution scenario within a payment acceptance.  Contains all information needed for payment processing including amounts,  blockchain addresses, expiration times, and transaction tracking.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-24T14:56:52.498104927Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class PaymentAcceptanceScenario {
  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nonnull
  private ContractAmount price;

  public static final String SERIALIZED_NAME_PAY = "pay";
  @SerializedName(SERIALIZED_NAME_PAY)
  @javax.annotation.Nonnull
  private ContractAmount pay;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private String address;

  public static final String SERIALIZED_NAME_EXPIRE = "expire";
  @SerializedName(SERIALIZED_NAME_EXPIRE)
  @javax.annotation.Nonnull
  private Expire expire;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private PaymentAcceptanceScenarioStatus status;

  public static final String SERIALIZED_NAME_RECEIVED = "received";
  @SerializedName(SERIALIZED_NAME_RECEIVED)
  @javax.annotation.Nonnull
  private ContractAmount received;

  public static final String SERIALIZED_NAME_TRANSACTION_LIST = "transaction-list";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LIST)
  @javax.annotation.Nonnull
  private List<BlockchainTransaction> transactionList = new ArrayList<>();

  public PaymentAcceptanceScenario() {
  }

  public PaymentAcceptanceScenario price(@javax.annotation.Nonnull ContractAmount price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public ContractAmount getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nonnull ContractAmount price) {
    this.price = price;
  }


  public PaymentAcceptanceScenario pay(@javax.annotation.Nonnull ContractAmount pay) {
    this.pay = pay;
    return this;
  }

  /**
   * Get pay
   * @return pay
   */
  @javax.annotation.Nonnull
  public ContractAmount getPay() {
    return pay;
  }

  public void setPay(@javax.annotation.Nonnull ContractAmount pay) {
    this.pay = pay;
  }


  public PaymentAcceptanceScenario address(@javax.annotation.Nonnull String address) {
    this.address = address;
    return this;
  }

  /**
   * Blockchain-specific address format used for cryptocurrency transactions. The exact format varies by network (e.g., Ethereum uses hexadecimal addresses starting with 0x, Bitcoin uses base58 encoding). Used for contract addresses, wallet addresses, and payment destinations.
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull String address) {
    this.address = address;
  }


  public PaymentAcceptanceScenario expire(@javax.annotation.Nonnull Expire expire) {
    this.expire = expire;
    return this;
  }

  /**
   * Get expire
   * @return expire
   */
  @javax.annotation.Nonnull
  public Expire getExpire() {
    return expire;
  }

  public void setExpire(@javax.annotation.Nonnull Expire expire) {
    this.expire = expire;
  }


  public PaymentAcceptanceScenario status(@javax.annotation.Nonnull PaymentAcceptanceScenarioStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public PaymentAcceptanceScenarioStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull PaymentAcceptanceScenarioStatus status) {
    this.status = status;
  }


  public PaymentAcceptanceScenario received(@javax.annotation.Nonnull ContractAmount received) {
    this.received = received;
    return this;
  }

  /**
   * Get received
   * @return received
   */
  @javax.annotation.Nonnull
  public ContractAmount getReceived() {
    return received;
  }

  public void setReceived(@javax.annotation.Nonnull ContractAmount received) {
    this.received = received;
  }


  public PaymentAcceptanceScenario transactionList(@javax.annotation.Nonnull List<BlockchainTransaction> transactionList) {
    this.transactionList = transactionList;
    return this;
  }

  public PaymentAcceptanceScenario addTransactionListItem(BlockchainTransaction transactionListItem) {
    if (this.transactionList == null) {
      this.transactionList = new ArrayList<>();
    }
    this.transactionList.add(transactionListItem);
    return this;
  }

  /**
   * List of blockchain transactions detected for this payment scenario.
   * @return transactionList
   */
  @javax.annotation.Nonnull
  public List<BlockchainTransaction> getTransactionList() {
    return transactionList;
  }

  public void setTransactionList(@javax.annotation.Nonnull List<BlockchainTransaction> transactionList) {
    this.transactionList = transactionList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAcceptanceScenario paymentAcceptanceScenario = (PaymentAcceptanceScenario) o;
    return Objects.equals(this.price, paymentAcceptanceScenario.price) &&
        Objects.equals(this.pay, paymentAcceptanceScenario.pay) &&
        Objects.equals(this.address, paymentAcceptanceScenario.address) &&
        Objects.equals(this.expire, paymentAcceptanceScenario.expire) &&
        Objects.equals(this.status, paymentAcceptanceScenario.status) &&
        Objects.equals(this.received, paymentAcceptanceScenario.received) &&
        Objects.equals(this.transactionList, paymentAcceptanceScenario.transactionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(price, pay, address, expire, status, received, transactionList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAcceptanceScenario {\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    pay: ").append(toIndentedString(pay)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    transactionList: ").append(toIndentedString(transactionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("price", "pay", "address", "expire", "status", "received", "transaction-list"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("price", "pay", "address", "expire", "status", "received", "transaction-list"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentAcceptanceScenario
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentAcceptanceScenario.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PaymentAcceptanceScenario is not found in the empty JSON string", PaymentAcceptanceScenario.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentAcceptanceScenario.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `PaymentAcceptanceScenario` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentAcceptanceScenario.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `price`
      ContractAmount.validateJsonElement(jsonObj.get("price"));
      // validate the required field `pay`
      ContractAmount.validateJsonElement(jsonObj.get("pay"));
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // validate the required field `expire`
      Expire.validateJsonElement(jsonObj.get("expire"));
      // validate the required field `status`
      PaymentAcceptanceScenarioStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `received`
      ContractAmount.validateJsonElement(jsonObj.get("received"));
      // ensure the json data is an array
      if (!jsonObj.get("transaction-list").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `transaction-list` to be an array in the JSON string but got `%s`", jsonObj.get("transaction-list").toString()));
      }

      JsonArray jsonArraytransactionList = jsonObj.getAsJsonArray("transaction-list");
      // validate the required field `transaction-list` (array)
      for (int i = 0; i < jsonArraytransactionList.size(); i++) {
        BlockchainTransaction.validateJsonElement(jsonArraytransactionList.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAcceptanceScenario.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAcceptanceScenario' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAcceptanceScenario> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAcceptanceScenario.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAcceptanceScenario>() {
           @Override
           public void write(JsonWriter out, PaymentAcceptanceScenario value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAcceptanceScenario read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentAcceptanceScenario given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentAcceptanceScenario
   * @throws IOException if the JSON string is invalid with respect to PaymentAcceptanceScenario
   */
  public static PaymentAcceptanceScenario fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAcceptanceScenario.class);
  }

  /**
   * Convert an instance of PaymentAcceptanceScenario to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

