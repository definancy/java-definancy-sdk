/*
 * Definancy API
 * Specification version: 0.0.1.wip.20250924
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.api;

import com.definancy.ApiCallback;
import com.definancy.ApiClient;
import com.definancy.ApiException;
import com.definancy.ApiResponse;
import com.definancy.Configuration;
import com.definancy.Pair;
import com.definancy.ProgressRequestBody;
import com.definancy.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.definancy.model.ContractAmount;
import com.definancy.model.ErrorList;
import com.definancy.model.PaymentAcceptance;
import com.definancy.model.PaymentAcceptanceConfig;
import com.definancy.model.PaymentEstimate;
import java.net.URI;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VaultPaymentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VaultPaymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VaultPaymentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for archivePaymentAcceptance
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance archived successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archivePaymentAcceptanceCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vault/{vaultId}/payment/acceptance/{paymentAcceptanceId}"
            .replace("{" + "vaultId" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "paymentAcceptanceId" + "}", localVarApiClient.escapeString(paymentAcceptanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "dpop-auth", "dpop-proof" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archivePaymentAcceptanceValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling archivePaymentAcceptance(Async)");
        }

        // verify the required parameter 'paymentAcceptanceId' is set
        if (paymentAcceptanceId == null) {
            throw new ApiException("Missing the required parameter 'paymentAcceptanceId' when calling archivePaymentAcceptance(Async)");
        }

        return archivePaymentAcceptanceCall(vaultId, paymentAcceptanceId, _callback);

    }

    /**
     * Archive Payment Acceptance
     * Deactivates a payment acceptance while preserving historical records.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @return PaymentAcceptance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance archived successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAcceptance archivePaymentAcceptance(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId) throws ApiException {
        ApiResponse<PaymentAcceptance> localVarResp = archivePaymentAcceptanceWithHttpInfo(vaultId, paymentAcceptanceId);
        return localVarResp.getData();
    }

    /**
     * Archive Payment Acceptance
     * Deactivates a payment acceptance while preserving historical records.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @return ApiResponse&lt;PaymentAcceptance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance archived successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAcceptance> archivePaymentAcceptanceWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId) throws ApiException {
        okhttp3.Call localVarCall = archivePaymentAcceptanceValidateBeforeCall(vaultId, paymentAcceptanceId, null);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Archive Payment Acceptance (asynchronously)
     * Deactivates a payment acceptance while preserving historical records.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance archived successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archivePaymentAcceptanceAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, final ApiCallback<PaymentAcceptance> _callback) throws ApiException {

        okhttp3.Call localVarCall = archivePaymentAcceptanceValidateBeforeCall(vaultId, paymentAcceptanceId, _callback);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentAcceptance
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceConfig Payment acceptance configuration including required payment scenarios and optional order context. The &#39;price-scenarios&#39; list must contain at least one contract-amount pair and all contracts must be subscribed to the vault. Optional &#39;order&#39; provides commercial context, and &#39;documents&#39; can reference existing compliance documents. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Payment acceptance created successfully. </td><td>  * Location - URL of the submitted document. <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentAcceptanceCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentAcceptanceConfig;

        // create path and map variables
        String localVarPath = "/api/v1/vault/{vaultId}/payment/acceptance"
            .replace("{" + "vaultId" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "dpop-auth", "dpop-proof" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentAcceptanceValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling createPaymentAcceptance(Async)");
        }

        // verify the required parameter 'paymentAcceptanceConfig' is set
        if (paymentAcceptanceConfig == null) {
            throw new ApiException("Missing the required parameter 'paymentAcceptanceConfig' when calling createPaymentAcceptance(Async)");
        }

        return createPaymentAcceptanceCall(vaultId, paymentAcceptanceConfig, _callback);

    }

    /**
     * Create Payment Acceptance
     * Initiates a new payment acceptance process.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceConfig Payment acceptance configuration including required payment scenarios and optional order context. The &#39;price-scenarios&#39; list must contain at least one contract-amount pair and all contracts must be subscribed to the vault. Optional &#39;order&#39; provides commercial context, and &#39;documents&#39; can reference existing compliance documents. (required)
     * @return PaymentAcceptance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Payment acceptance created successfully. </td><td>  * Location - URL of the submitted document. <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAcceptance createPaymentAcceptance(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig) throws ApiException {
        ApiResponse<PaymentAcceptance> localVarResp = createPaymentAcceptanceWithHttpInfo(vaultId, paymentAcceptanceConfig);
        return localVarResp.getData();
    }

    /**
     * Create Payment Acceptance
     * Initiates a new payment acceptance process.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceConfig Payment acceptance configuration including required payment scenarios and optional order context. The &#39;price-scenarios&#39; list must contain at least one contract-amount pair and all contracts must be subscribed to the vault. Optional &#39;order&#39; provides commercial context, and &#39;documents&#39; can reference existing compliance documents. (required)
     * @return ApiResponse&lt;PaymentAcceptance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Payment acceptance created successfully. </td><td>  * Location - URL of the submitted document. <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAcceptance> createPaymentAcceptanceWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig) throws ApiException {
        okhttp3.Call localVarCall = createPaymentAcceptanceValidateBeforeCall(vaultId, paymentAcceptanceConfig, null);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment Acceptance (asynchronously)
     * Initiates a new payment acceptance process.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceConfig Payment acceptance configuration including required payment scenarios and optional order context. The &#39;price-scenarios&#39; list must contain at least one contract-amount pair and all contracts must be subscribed to the vault. Optional &#39;order&#39; provides commercial context, and &#39;documents&#39; can reference existing compliance documents. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Payment acceptance created successfully. </td><td>  * Location - URL of the submitted document. <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentAcceptanceAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig, final ApiCallback<PaymentAcceptance> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentAcceptanceValidateBeforeCall(vaultId, paymentAcceptanceConfig, _callback);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentAcceptance
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance details retrieved. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAcceptanceCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vault/{vaultId}/payment/acceptance/{paymentAcceptanceId}"
            .replace("{" + "vaultId" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "paymentAcceptanceId" + "}", localVarApiClient.escapeString(paymentAcceptanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "dpop-auth", "dpop-proof" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentAcceptanceValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling getPaymentAcceptance(Async)");
        }

        // verify the required parameter 'paymentAcceptanceId' is set
        if (paymentAcceptanceId == null) {
            throw new ApiException("Missing the required parameter 'paymentAcceptanceId' when calling getPaymentAcceptance(Async)");
        }

        return getPaymentAcceptanceCall(vaultId, paymentAcceptanceId, _callback);

    }

    /**
     * Get Payment Acceptance
     * Retrieves details of an existing payment acceptance.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @return PaymentAcceptance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance details retrieved. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAcceptance getPaymentAcceptance(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId) throws ApiException {
        ApiResponse<PaymentAcceptance> localVarResp = getPaymentAcceptanceWithHttpInfo(vaultId, paymentAcceptanceId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Acceptance
     * Retrieves details of an existing payment acceptance.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @return ApiResponse&lt;PaymentAcceptance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance details retrieved. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAcceptance> getPaymentAcceptanceWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentAcceptanceValidateBeforeCall(vaultId, paymentAcceptanceId, null);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Acceptance (asynchronously)
     * Retrieves details of an existing payment acceptance.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance details retrieved. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAcceptanceAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, final ApiCallback<PaymentAcceptance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentAcceptanceValidateBeforeCall(vaultId, paymentAcceptanceId, _callback);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkPaymentAcceptanceDocument
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param documentId Unique identifier for a compliance document within a vault. Used for document retrieval, status checking, linking to payment acceptance, and managing the document verification lifecycle. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document successfully linked to payment acceptance. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkPaymentAcceptanceDocumentCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vault/{vaultId}/payment/acceptance/{paymentAcceptanceId}/document/{documentId}"
            .replace("{" + "vaultId" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "paymentAcceptanceId" + "}", localVarApiClient.escapeString(paymentAcceptanceId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "dpop-auth", "dpop-proof" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkPaymentAcceptanceDocumentValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling linkPaymentAcceptanceDocument(Async)");
        }

        // verify the required parameter 'paymentAcceptanceId' is set
        if (paymentAcceptanceId == null) {
            throw new ApiException("Missing the required parameter 'paymentAcceptanceId' when calling linkPaymentAcceptanceDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling linkPaymentAcceptanceDocument(Async)");
        }

        return linkPaymentAcceptanceDocumentCall(vaultId, paymentAcceptanceId, documentId, _callback);

    }

    /**
     * Link Document to Payment Acceptance
     * Associates a document with a payment acceptance. Supported document types: personal identification, entity documentation,  wallet verification data.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param documentId Unique identifier for a compliance document within a vault. Used for document retrieval, status checking, linking to payment acceptance, and managing the document verification lifecycle. (required)
     * @return PaymentAcceptance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document successfully linked to payment acceptance. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAcceptance linkPaymentAcceptanceDocument(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId) throws ApiException {
        ApiResponse<PaymentAcceptance> localVarResp = linkPaymentAcceptanceDocumentWithHttpInfo(vaultId, paymentAcceptanceId, documentId);
        return localVarResp.getData();
    }

    /**
     * Link Document to Payment Acceptance
     * Associates a document with a payment acceptance. Supported document types: personal identification, entity documentation,  wallet verification data.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param documentId Unique identifier for a compliance document within a vault. Used for document retrieval, status checking, linking to payment acceptance, and managing the document verification lifecycle. (required)
     * @return ApiResponse&lt;PaymentAcceptance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document successfully linked to payment acceptance. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAcceptance> linkPaymentAcceptanceDocumentWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = linkPaymentAcceptanceDocumentValidateBeforeCall(vaultId, paymentAcceptanceId, documentId, null);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link Document to Payment Acceptance (asynchronously)
     * Associates a document with a payment acceptance. Supported document types: personal identification, entity documentation,  wallet verification data.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param documentId Unique identifier for a compliance document within a vault. Used for document retrieval, status checking, linking to payment acceptance, and managing the document verification lifecycle. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document successfully linked to payment acceptance. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkPaymentAcceptanceDocumentAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId, final ApiCallback<PaymentAcceptance> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkPaymentAcceptanceDocumentValidateBeforeCall(vaultId, paymentAcceptanceId, documentId, _callback);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlinkPaymentAcceptanceDocument
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param documentId Unique identifier for a compliance document within a vault. Used for document retrieval, status checking, linking to payment acceptance, and managing the document verification lifecycle. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document successfully unlinked from payment acceptance. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkPaymentAcceptanceDocumentCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vault/{vaultId}/payment/acceptance/{paymentAcceptanceId}/document/{documentId}"
            .replace("{" + "vaultId" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "paymentAcceptanceId" + "}", localVarApiClient.escapeString(paymentAcceptanceId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "dpop-auth", "dpop-proof" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkPaymentAcceptanceDocumentValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling unlinkPaymentAcceptanceDocument(Async)");
        }

        // verify the required parameter 'paymentAcceptanceId' is set
        if (paymentAcceptanceId == null) {
            throw new ApiException("Missing the required parameter 'paymentAcceptanceId' when calling unlinkPaymentAcceptanceDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling unlinkPaymentAcceptanceDocument(Async)");
        }

        return unlinkPaymentAcceptanceDocumentCall(vaultId, paymentAcceptanceId, documentId, _callback);

    }

    /**
     * Unlink Document from Payment Acceptance
     * Removes document association from active consideration in payment acceptance while retaining it for audit purposes.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param documentId Unique identifier for a compliance document within a vault. Used for document retrieval, status checking, linking to payment acceptance, and managing the document verification lifecycle. (required)
     * @return PaymentAcceptance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document successfully unlinked from payment acceptance. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAcceptance unlinkPaymentAcceptanceDocument(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId) throws ApiException {
        ApiResponse<PaymentAcceptance> localVarResp = unlinkPaymentAcceptanceDocumentWithHttpInfo(vaultId, paymentAcceptanceId, documentId);
        return localVarResp.getData();
    }

    /**
     * Unlink Document from Payment Acceptance
     * Removes document association from active consideration in payment acceptance while retaining it for audit purposes.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param documentId Unique identifier for a compliance document within a vault. Used for document retrieval, status checking, linking to payment acceptance, and managing the document verification lifecycle. (required)
     * @return ApiResponse&lt;PaymentAcceptance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document successfully unlinked from payment acceptance. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAcceptance> unlinkPaymentAcceptanceDocumentWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = unlinkPaymentAcceptanceDocumentValidateBeforeCall(vaultId, paymentAcceptanceId, documentId, null);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlink Document from Payment Acceptance (asynchronously)
     * Removes document association from active consideration in payment acceptance while retaining it for audit purposes.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param documentId Unique identifier for a compliance document within a vault. Used for document retrieval, status checking, linking to payment acceptance, and managing the document verification lifecycle. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document successfully unlinked from payment acceptance. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkPaymentAcceptanceDocumentAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull UUID documentId, final ApiCallback<PaymentAcceptance> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlinkPaymentAcceptanceDocumentValidateBeforeCall(vaultId, paymentAcceptanceId, documentId, _callback);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePaymentAcceptance
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param paymentAcceptanceConfig Partial payment acceptance configuration for updates. Can be used to modify the &#39;documents&#39; list to add or remove compliance document associations, or to update &#39;order&#39; information. Core price scenarios cannot be modified after  creation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance updated successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentAcceptanceCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentAcceptanceConfig;

        // create path and map variables
        String localVarPath = "/api/v1/vault/{vaultId}/payment/acceptance/{paymentAcceptanceId}"
            .replace("{" + "vaultId" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "paymentAcceptanceId" + "}", localVarApiClient.escapeString(paymentAcceptanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "dpop-auth", "dpop-proof" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentAcceptanceValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling updatePaymentAcceptance(Async)");
        }

        // verify the required parameter 'paymentAcceptanceId' is set
        if (paymentAcceptanceId == null) {
            throw new ApiException("Missing the required parameter 'paymentAcceptanceId' when calling updatePaymentAcceptance(Async)");
        }

        // verify the required parameter 'paymentAcceptanceConfig' is set
        if (paymentAcceptanceConfig == null) {
            throw new ApiException("Missing the required parameter 'paymentAcceptanceConfig' when calling updatePaymentAcceptance(Async)");
        }

        return updatePaymentAcceptanceCall(vaultId, paymentAcceptanceId, paymentAcceptanceConfig, _callback);

    }

    /**
     * Update Payment Acceptance
     * Modifies configuration of an existing payment acceptance.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param paymentAcceptanceConfig Partial payment acceptance configuration for updates. Can be used to modify the &#39;documents&#39; list to add or remove compliance document associations, or to update &#39;order&#39; information. Core price scenarios cannot be modified after  creation. (required)
     * @return PaymentAcceptance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance updated successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAcceptance updatePaymentAcceptance(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig) throws ApiException {
        ApiResponse<PaymentAcceptance> localVarResp = updatePaymentAcceptanceWithHttpInfo(vaultId, paymentAcceptanceId, paymentAcceptanceConfig);
        return localVarResp.getData();
    }

    /**
     * Update Payment Acceptance
     * Modifies configuration of an existing payment acceptance.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param paymentAcceptanceConfig Partial payment acceptance configuration for updates. Can be used to modify the &#39;documents&#39; list to add or remove compliance document associations, or to update &#39;order&#39; information. Core price scenarios cannot be modified after  creation. (required)
     * @return ApiResponse&lt;PaymentAcceptance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance updated successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAcceptance> updatePaymentAcceptanceWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentAcceptanceValidateBeforeCall(vaultId, paymentAcceptanceId, paymentAcceptanceConfig, null);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Payment Acceptance (asynchronously)
     * Modifies configuration of an existing payment acceptance.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param paymentAcceptanceId Unique identifier for a payment acceptance within a vault. Used to track specific payment requests, monitor transaction status, manage associated documents, and retrieve payment history and compliance information. (required)
     * @param paymentAcceptanceConfig Partial payment acceptance configuration for updates. Can be used to modify the &#39;documents&#39; list to add or remove compliance document associations, or to update &#39;order&#39; information. Core price scenarios cannot be modified after  creation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment acceptance updated successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentAcceptanceAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull UUID paymentAcceptanceId, @javax.annotation.Nonnull PaymentAcceptanceConfig paymentAcceptanceConfig, final ApiCallback<PaymentAcceptance> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentAcceptanceValidateBeforeCall(vaultId, paymentAcceptanceId, paymentAcceptanceConfig, _callback);
        Type localVarReturnType = new TypeToken<PaymentAcceptance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultGetPaymentEstimate
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param contractAmount List of contract-amount pairs for which to generate payment estimates. Must contain at least one contract-amount pair. Each contract must be subscribed to the vault. The amounts should represent the desired payment values in the contract&#39;s native units. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment estimate generated successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultGetPaymentEstimateCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull List<ContractAmount> contractAmount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractAmount;

        // create path and map variables
        String localVarPath = "/api/v1/vault/{vaultId}/payment/estimate"
            .replace("{" + "vaultId" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "dpop-auth", "dpop-proof" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultGetPaymentEstimateValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull List<ContractAmount> contractAmount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling vaultGetPaymentEstimate(Async)");
        }

        // verify the required parameter 'contractAmount' is set
        if (contractAmount == null) {
            throw new ApiException("Missing the required parameter 'contractAmount' when calling vaultGetPaymentEstimate(Async)");
        }

        return vaultGetPaymentEstimateCall(vaultId, contractAmount, _callback);

    }

    /**
     * Generate Payment Estimate
     * Calculates payment scenarios for specified contracts and amounts. Requires at least one contract-amount pair in the request body.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param contractAmount List of contract-amount pairs for which to generate payment estimates. Must contain at least one contract-amount pair. Each contract must be subscribed to the vault. The amounts should represent the desired payment values in the contract&#39;s native units. (required)
     * @return PaymentEstimate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment estimate generated successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentEstimate vaultGetPaymentEstimate(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull List<ContractAmount> contractAmount) throws ApiException {
        ApiResponse<PaymentEstimate> localVarResp = vaultGetPaymentEstimateWithHttpInfo(vaultId, contractAmount);
        return localVarResp.getData();
    }

    /**
     * Generate Payment Estimate
     * Calculates payment scenarios for specified contracts and amounts. Requires at least one contract-amount pair in the request body.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param contractAmount List of contract-amount pairs for which to generate payment estimates. Must contain at least one contract-amount pair. Each contract must be subscribed to the vault. The amounts should represent the desired payment values in the contract&#39;s native units. (required)
     * @return ApiResponse&lt;PaymentEstimate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment estimate generated successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentEstimate> vaultGetPaymentEstimateWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull List<ContractAmount> contractAmount) throws ApiException {
        okhttp3.Call localVarCall = vaultGetPaymentEstimateValidateBeforeCall(vaultId, contractAmount, null);
        Type localVarReturnType = new TypeToken<PaymentEstimate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Payment Estimate (asynchronously)
     * Calculates payment scenarios for specified contracts and amounts. Requires at least one contract-amount pair in the request body.
     * @param vaultId Unique identifier for a vault container that manages payment acceptance, documents, and contract subscriptions. Used across all vault-related operations including payment processing, document management, and configuration updates. (required)
     * @param contractAmount List of contract-amount pairs for which to generate payment estimates. Must contain at least one contract-amount pair. Each contract must be subscribed to the vault. The amounts should represent the desired payment values in the contract&#39;s native units. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment estimate generated successfully. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing, invalid, or expired. The request lacks proper authorization headers or tokens. Clients should verify their authentication setup and ensure valid credentials are provided in subsequent requests. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user lacks sufficient permissions to perform this operation. While authentication was successful, the user&#39;s role or access level does not permit the requested action. Contact an administrator for access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist or has been removed. This may indicate an incorrect ID, a resource that was deleted, or a path that doesn&#39;t match any configured endpoints. Verify the resource identifier and try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultGetPaymentEstimateAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nonnull List<ContractAmount> contractAmount, final ApiCallback<PaymentEstimate> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultGetPaymentEstimateValidateBeforeCall(vaultId, contractAmount, _callback);
        Type localVarReturnType = new TypeToken<PaymentEstimate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
