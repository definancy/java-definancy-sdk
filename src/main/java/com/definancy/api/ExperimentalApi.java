/*
 * Definancy Node API
 * Specification version: 0.0.1.wip.20250826
 *
 * NOTE: This class is auto generated by our custom generator.
 * Do not edit the class manually.
 */


package com.definancy.api;

import com.definancy.ApiCallback;
import com.definancy.ApiClient;
import com.definancy.ApiException;
import com.definancy.ApiResponse;
import com.definancy.Configuration;
import com.definancy.Pair;
import com.definancy.ProgressRequestBody;
import com.definancy.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.definancy.model.ErrorList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExperimentalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExperimentalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExperimentalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for registerDid
     * @param definancyId The Definancy Identifier. This is a base32-encoded (without padding) string derived from an ED25519 public key. The identifier is generated by: 1. Taking the 32-byte public key 2. Computing a SHA512/256 hash (32 bytes) of the public key 3. Taking the last 4 bytes of this hash as a checksum 4. Appending the checksum to the public key (creating a 36-byte value) 5. Encoding the combined value using base32 without padding (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Success.** The DID &#x60;did:definancy:{definancyId}&#x60; was successfully registered. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDidCall(@javax.annotation.Nonnull String definancyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/did/{definancyId}"
            .replace("{" + "definancyId" + "}", localVarApiClient.escapeString(definancyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDidValidateBeforeCall(@javax.annotation.Nonnull String definancyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definancyId' is set
        if (definancyId == null) {
            throw new ApiException("Missing the required parameter 'definancyId' when calling registerDid(Async)");
        }

        return registerDidCall(definancyId, _callback);

    }

    /**
     * Register a Definancy DID
     * Registers a **Decentralized Identifier (DID)** using the Definancy method. The DID is constructed in the format &#x60;did:definancy:{definancyId}&#x60; and is associated with the public key from which the &#x60;definancyId&#x60; is derived.  This operation does not create a new DID from scratch but formally registers the Definancy method-specific identifier on the network, enabling it to be resolved and used for verifiable credentials and interactions.  **Note:** This endpoint is marked as Experimental and its interface may change in future releases.
     * @param definancyId The Definancy Identifier. This is a base32-encoded (without padding) string derived from an ED25519 public key. The identifier is generated by: 1. Taking the 32-byte public key 2. Computing a SHA512/256 hash (32 bytes) of the public key 3. Taking the last 4 bytes of this hash as a checksum 4. Appending the checksum to the public key (creating a 36-byte value) 5. Encoding the combined value using base32 without padding (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Success.** The DID &#x60;did:definancy:{definancyId}&#x60; was successfully registered. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public void registerDid(@javax.annotation.Nonnull String definancyId) throws ApiException {
        registerDidWithHttpInfo(definancyId);
    }

    /**
     * Register a Definancy DID
     * Registers a **Decentralized Identifier (DID)** using the Definancy method. The DID is constructed in the format &#x60;did:definancy:{definancyId}&#x60; and is associated with the public key from which the &#x60;definancyId&#x60; is derived.  This operation does not create a new DID from scratch but formally registers the Definancy method-specific identifier on the network, enabling it to be resolved and used for verifiable credentials and interactions.  **Note:** This endpoint is marked as Experimental and its interface may change in future releases.
     * @param definancyId The Definancy Identifier. This is a base32-encoded (without padding) string derived from an ED25519 public key. The identifier is generated by: 1. Taking the 32-byte public key 2. Computing a SHA512/256 hash (32 bytes) of the public key 3. Taking the last 4 bytes of this hash as a checksum 4. Appending the checksum to the public key (creating a 36-byte value) 5. Encoding the combined value using base32 without padding (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Success.** The DID &#x60;did:definancy:{definancyId}&#x60; was successfully registered. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registerDidWithHttpInfo(@javax.annotation.Nonnull String definancyId) throws ApiException {
        okhttp3.Call localVarCall = registerDidValidateBeforeCall(definancyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a Definancy DID (asynchronously)
     * Registers a **Decentralized Identifier (DID)** using the Definancy method. The DID is constructed in the format &#x60;did:definancy:{definancyId}&#x60; and is associated with the public key from which the &#x60;definancyId&#x60; is derived.  This operation does not create a new DID from scratch but formally registers the Definancy method-specific identifier on the network, enabling it to be resolved and used for verifiable credentials and interactions.  **Note:** This endpoint is marked as Experimental and its interface may change in future releases.
     * @param definancyId The Definancy Identifier. This is a base32-encoded (without padding) string derived from an ED25519 public key. The identifier is generated by: 1. Taking the 32-byte public key 2. Computing a SHA512/256 hash (32 bytes) of the public key 3. Taking the last 4 bytes of this hash as a checksum 4. Appending the checksum to the public key (creating a 36-byte value) 5. Encoding the combined value using base32 without padding (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Success.** The DID &#x60;did:definancy:{definancyId}&#x60; was successfully registered. </td><td>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request contains malformed data, invalid parameters, or violates API constraints. This includes validation errors, incorrect data types, missing required fields, or values outside acceptable ranges. Check the error details for specific issues. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected server error occurred while processing the request. This indicates an internal system issue that prevented successful completion. The error details may provide additional context for debugging and support purposes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDidAsync(@javax.annotation.Nonnull String definancyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDidValidateBeforeCall(definancyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
